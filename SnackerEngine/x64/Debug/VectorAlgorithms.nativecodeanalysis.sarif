{
  "version": "2.1.0",
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "runs": [
    {
      "results": [
        {
          "ruleId": "C26451",
          "message": {
            "text": "Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///D:/dev/SnackerEngine/SnackerEngine/src/Math/VectorAlgorithms.cpp"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 33,
                  "endLine": 19,
                  "endColumn": 37
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "SnackerEngine::computeTangentBiTangent",
                  "decoratedName": "?computeTangentBiTangent@SnackerEngine@@YA?AU?$pair@V?$vector@U?$Vec3@M@SnackerEngine@@V?$allocator@U?$Vec3@M@SnackerEngine@@@std@@@std@@V12@@std@@AEBV?$vector@U?$Vec3@M@SnackerEngine@@V?$allocator@U?$Vec3@M@SnackerEngine@@@std@@@3@AEBV?$vector@U?$Vec2@M@SnackerEngine@@V?$allocator@U?$Vec2@M@SnackerEngine@@@std@@@3@AEBV?$vector@IV?$allocator@I@std@@@3@AEB_N@Z",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26451",
          "message": {
            "text": "Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///D:/dev/SnackerEngine/SnackerEngine/src/Math/VectorAlgorithms.cpp"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 33,
                  "endLine": 20,
                  "endColumn": 37
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "SnackerEngine::computeTangentBiTangent",
                  "decoratedName": "?computeTangentBiTangent@SnackerEngine@@YA?AU?$pair@V?$vector@U?$Vec3@M@SnackerEngine@@V?$allocator@U?$Vec3@M@SnackerEngine@@@std@@@std@@V12@@std@@AEBV?$vector@U?$Vec3@M@SnackerEngine@@V?$allocator@U?$Vec3@M@SnackerEngine@@@std@@@3@AEBV?$vector@U?$Vec2@M@SnackerEngine@@V?$allocator@U?$Vec2@M@SnackerEngine@@@std@@@3@AEBV?$vector@IV?$allocator@I@std@@@3@AEB_N@Z",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26451",
          "message": {
            "text": "Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///D:/dev/SnackerEngine/SnackerEngine/src/Math/VectorAlgorithms.cpp"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 33,
                  "endLine": 22,
                  "endColumn": 37
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "SnackerEngine::computeTangentBiTangent",
                  "decoratedName": "?computeTangentBiTangent@SnackerEngine@@YA?AU?$pair@V?$vector@U?$Vec3@M@SnackerEngine@@V?$allocator@U?$Vec3@M@SnackerEngine@@@std@@@std@@V12@@std@@AEBV?$vector@U?$Vec3@M@SnackerEngine@@V?$allocator@U?$Vec3@M@SnackerEngine@@@std@@@3@AEBV?$vector@U?$Vec2@M@SnackerEngine@@V?$allocator@U?$Vec2@M@SnackerEngine@@@std@@@3@AEBV?$vector@IV?$allocator@I@std@@@3@AEB_N@Z",
                  "kind": "function"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "C26451",
          "message": {
            "text": "Arithmetic overflow: Using operator '+' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '+' to avoid overflow (io.2)."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///D:/dev/SnackerEngine/SnackerEngine/src/Math/VectorAlgorithms.cpp"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 33,
                  "endLine": 23,
                  "endColumn": 37
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "SnackerEngine::computeTangentBiTangent",
                  "decoratedName": "?computeTangentBiTangent@SnackerEngine@@YA?AU?$pair@V?$vector@U?$Vec3@M@SnackerEngine@@V?$allocator@U?$Vec3@M@SnackerEngine@@@std@@@std@@V12@@std@@AEBV?$vector@U?$Vec3@M@SnackerEngine@@V?$allocator@U?$Vec3@M@SnackerEngine@@@std@@@3@AEBV?$vector@U?$Vec2@M@SnackerEngine@@V?$allocator@U?$Vec2@M@SnackerEngine@@@std@@@3@AEBV?$vector@IV?$allocator@I@std@@@3@AEB_N@Z",
                  "kind": "function"
                }
              ]
            }
          ]
        }
      ],
      "tool": {
        "driver": {
          "name": "PREfast",
          "fullName": "PREfast Code Analysis",
          "version": "14.33.31630.0",
          "informationUri": "https://aka.ms/cpp/ca"
        }
      },
      "invocations": [
        {
          "executionSuccessful": true
        }
      ],
      "artifacts": [
        {
          "location": {
            "uri": "file:///D:/dev/SnackerEngine/SnackerEngine/src/Math/VectorAlgorithms.cpp"
          },
          "roles": [
            "analysisTarget",
            "resultFile"
          ],
          "hashes": {
            "sha-256": "51ceded8ddeed8f7fb9ac011d8e57623aa2d0b186e8422e938bc37c006d293ea"
          }
        },
        {
          "location": {
            "uri": "file:///d:/dev/snackerengine/snackerengine/src/math/vectoralgorithms.h"
          },
          "hashes": {
            "sha-256": "85cbdf4f0ff9fe7d945052801d21352357e96e18a2f844ce1833eafa83337f99"
          }
        },
        {
          "location": {
            "uri": "file:///d:/dev/snackerengine/snackerengine/src/math/vec.h"
          },
          "hashes": {
            "sha-256": "f83c4e92e158d9885984eec7861b52bdf5f48b71bdca47b54ccde5435d9cecce"
          }
        }
      ]
    }
  ]
}